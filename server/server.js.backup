const dotenv = require('dotenv');
const path = require('path');
const fs = require('fs');

// Cargar variables de entorno desde el archivo config.env
dotenv.config({ path: path.join(__dirname, 'config.env') });

// Verificar que las variables de entorno se hayan cargado correctamente
console.log('Configuración de la base de datos:', {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD ? '*****' : '(no configurada)'
});

const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 4000;

// Configuración de CORS
const corsOptions = {
  origin: '*', // Permitir cualquier origen (en producción, reemplazar con dominios específicos)
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  optionsSuccessStatus: 200 // Para navegadores antiguos (IE11, varios SmartTVs)
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json());

// Manejar solicitudes OPTIONS (preflight)
app.options('*', cors(corsOptions));

// Configuración para servir archivos estáticos
const staticOptions = {
  setHeaders: (res, filePath) => {
    // Configurar el tipo MIME correcto para diferentes tipos de archivos
    if (filePath.endsWith('.js')) {
      res.setHeader('Content-Type', 'application/javascript');
    } else if (filePath.endsWith('.css')) {
      res.setHeader('Content-Type', 'text/css');
    } else if (filePath.endsWith('.png')) {
      res.setHeader('Content-Type', 'image/png');
    } else if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
      res.setHeader('Content-Type', 'image/jpeg');
    } else if (filePath.endsWith('.svg')) {
      res.setHeader('Content-Type', 'image/svg+xml');
    }
  }
};

// Servir archivos estáticos desde la carpeta src
app.use(express.static(path.join(__dirname, '../src'), staticOptions));

// Ruta específica para el favicon.ico
app.get('/favicon.ico', (req, res) => {
  res.sendFile(path.join(__dirname, '../src/favicon.ico'));
});

// Ruta para el archivo auth.js
app.get('/js/auth.js', (req, res) => {
  res.sendFile(path.join(__dirname, '../src/js/auth.js'));
});

// Manejar rutas de paneles
app.get('/pages/panel-admin*', (req, res) => {
  res.sendFile(path.join(__dirname, '../src/pages/panel-admin/index.html'));
});

app.get('/pages/panel-profesor*', (req, res) => {
  res.sendFile(path.join(__dirname, '../src/pages/panel-profesor/index.html'));
});

app.get('/pages/panel-estudiante*', (req, res) => {
  res.sendFile(path.join(__dirname, '../src/pages/panel-estudiante/index.html'));
});

// Ruta de fallback para SPA (Single Page Application)
app.get('*', (req, res) => {
  // Si la ruta comienza con /api, devolver 404
  if (req.path.startsWith('/api')) {
    return res.status(404).json({ error: 'Ruta no encontrada' });
  }
  
  // Intentar servir el archivo solicitado
  const filePath = path.join(__dirname, '../src', req.path);
  if (fs.existsSync(filePath) && !fs.lstatSync(filePath).isDirectory()) {
    return res.sendFile(filePath);
  }
  
  // Si el archivo no existe, servir el index.html de la aplicación
  res.sendFile(path.join(__dirname, '../src/pages/login/index.html'));
});

// Configuración de la base de datos
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'sistema_escolar',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

// Pool de conexiones
const pool = mysql.createPool(dbConfig);

app.get('/test-db', async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT 1 + 1 AS resultado');
    res.json({ resultado: rows[0].resultado });
  } catch (error) {
    console.error('Error probando la base de datos:', error);
    res.status(500).json({ error: 'Error en la base de datos' });
  }
});


// Middleware para verificar token
const authenticateToken = (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];
  
  if (!token) return res.sendStatus(401);
  
  jwt.verify(token, process.env.JWT_SECRET || 'secreto_del_sistema', (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Ruta de registro
app.post('/api/register', async (req, res) => {
  try {
    const { nombre, email, username, password, role } = req.body;
    
    // Validar datos
    if (!nombre || !email || !username || !password || !role) {
      return res.status(400).json({ error: 'Todos los campos son obligatorios' });
    }

    // Verificar si el correo o usuario ya existen
    const [users] = await pool.query(
      'SELECT * FROM usuarios WHERE email = ? OR username = ?', 
      [email, username]
    );

    if (users.length > 0) {
      const existingUser = users[0];
      if (existingUser.email === email) {
        return res.status(400).json({ error: 'El correo electrónico ya está registrado' });
      }
      if (existingUser.username === username) {
        return res.status(400).json({ error: 'El nombre de usuario ya está en uso' });
      }
    }

    // Encriptar contraseña
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insertar nuevo usuario
    const [result] = await pool.query(
      'INSERT INTO usuarios (nombre, email, username, password, role) VALUES (?, ?, ?, ?, ?)',
      [nombre, email, username, hashedPassword, role]
    );

    // Crear token JWT
    const token = jwt.sign(
      { id: result.insertId, email, role },
      process.env.JWT_SECRET || 'secreto_del_sistema',
      { expiresIn: '24h' }
    );

    res.status(201).json({
      message: 'Usuario registrado exitosamente',
      token,
      user: {
        id: result.insertId,
        nombre,
        email,
        username,
        role
      }
    });
  } catch (error) {
    console.error('Error al registrar usuario:', error);
    res.status(500).json({ error: 'Error al registrar el usuario' });
  }
});

// Ruta de login
app.post('/api/login', async (req, res) => {
  try {
    console.log('Solicitud de login recibida:', {
      body: req.body,
      headers: req.headers
    });
    
    const { email, password } = req.body;
    
    // Validar datos
    if (!email || !password) {
      console.log('Faltan credenciales');
      return res.status(400).json({ error: 'Correo y contraseña son requeridos' });
    }
    
    // Buscar usuario
    console.log('Buscando usuario con email:', email);
    const [users] = await pool.query('SELECT * FROM usuarios WHERE email = ?', [email]);
    
    if (users.length === 0) {
      console.log('No se encontró ningún usuario con ese email');
      return res.status(401).json({ error: 'Credenciales inválidas' });
    }
    
    const user = users[0];
    console.log('Usuario encontrado:', { 
      id: user.id, 
      email: user.email, 
      role: user.role,
      passwordHash: user.password
    });
    
    // Verificar contraseña
    console.log('Comparando contraseñas...');
    const validPassword = await bcrypt.compare(password, user.password);
    console.log('Resultado de la comparación:', validPassword);
    
    if (!validPassword) {
      console.log('Contraseña incorrecta');
      return res.status(401).json({ error: 'Credenciales inválidas' });
    }
    
    // Crear token JWT
    const token = jwt.sign(
      { id: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET || 'secreto_del_sistema',
      { expiresIn: '24h' }
    );
    
    // Enviar respuesta exitosa
    res.json({
      message: 'Inicio de sesión exitoso',
      token,
      user: {
        id: user.id,
        nombre: user.nombre,
        email: user.email,
        username: user.username,
        role: user.role
      }
    });
  } catch (error) {
    console.error('Error al iniciar sesión:', error);
    res.status(500).json({ error: 'Error al iniciar sesión' });
  }
});

// Ruta protegida de ejemplo
app.get('/api/user', authenticateToken, (req, res) => {
  res.json({ user: req.user });
});

// Servir archivos estáticos de la aplicación
app.use(express.static(path.join(__dirname, '../src')));

// Ruta para manejar todas las demás peticiones y devolver el index.html
app.get('*', (req, res) => {
  // Si es una petición a la API, devolver 404
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'Ruta de API no encontrada' });
  }
  
  // Intentar servir la página solicitada
  const requestedPath = req.path === '/' ? '/pages/login/index.html' : req.path;
  const filePath = path.join(__dirname, '../src', requestedPath);
  
  // Verificar si el archivo existe
  if (fs.existsSync(filePath)) {
    return res.sendFile(filePath);
  }
  
  // Si el archivo no existe, redirigir al login
  res.sendFile(path.join(__dirname, '../src/pages/login/index.html'));
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});

// Manejo de errores
process.on('unhandledRejection', (err) => {
  console.error('Error no manejado:', err);
  process.exit(1);
});
